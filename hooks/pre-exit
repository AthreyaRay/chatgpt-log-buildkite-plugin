#!/bin/bash
set -euo pipefail

# Only analyze failed jobs
if [[ "$BUILDKITE_JOB_EXIT_STATUS" == "0" ]]; then
  echo "--- Job succeeded, skipping ChatGPT analysis"
  exit 0
fi

echo "--- Job failed (exit status: $BUILDKITE_JOB_EXIT_STATUS), analyzing with ChatGPT"
echo "--- Copying Buildkite job log to local file"
cp "$BUILDKITE_JOB_LOG_TMPFILE" ./buildkite-job.log
LOG_FILE="./buildkite-job.log"

echo "--- Showing last 20 lines of copied job log:"
tail -n 20 "$LOG_FILE"

echo "--- Reading and escaping last 600 lines for JSON safety"
LOG_CHUNK=$(tail -n 600 "$LOG_FILE" | jq -Rs .)

echo "--- Getting OpenAI API key from Secrets"
OPENAI_API_KEY=$(buildkite-agent secret get "open_ai_key")

echo "--- Sending log to ChatGPT for analysis"
RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: application/json" \
  -d "{
    \"model\": \"gpt-4o\",
    \"messages\": [
      {\"role\": \"system\", \"content\": \"You are a CI assistant. Analyze this Buildkite job log and explain what went wrong and how to fix it.\"},
      {\"role\": \"user\", \"content\": $LOG_CHUNK}
    ],
    \"temperature\": 0.3,
    \"max_tokens\": 1500
  }")

echo "--- Raw response from ChatGPT:"
echo "$RESPONSE"

SUGGESTION=$(echo "$RESPONSE" | jq -er '.choices[0].message.content // empty') || {
  echo "‚ùå Failed to parse ChatGPT suggestion"
  exit 1
}

if [[ -z "$SUGGESTION" ]]; then
  SUGGESTION="(ChatGPT did not return a suggestion. Check API key, log chunk, or error above.)"
fi

echo "--- Annotating build with ChatGPT's suggestion"
echo "$SUGGESTION" | buildkite-agent annotate --style "info" --context "chatgpt-log"

echo "--- Cleaning up"
rm -f "$LOG_FILE"
